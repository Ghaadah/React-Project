{"ast":null,"code":"var _jsxFileName = \"/Users/raghadalmusawi/Desktop/finalProject-564/src/Views/Russ.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { backgroundColors } from '../Uitls/chartColors';\nimport useFetchData from '../Hooks/GetAPI'; // Import the custom hook\nimport 'chart.js/auto';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Russ = ({\n  title\n}) => {\n  _s();\n  const url = 'https://cs464p564-frontend-api.vercel.app/api/countries';\n\n  // Call the custom hook and pass the URL to fetch the data from the API\n  const {\n    data: counteries,\n    isLoaded,\n    error\n  } = useFetchData(url);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  }\n  //save the needed data\n  const countryNames = counteries.map(item => item.name);\n  const population = counteries.map(item => item.population);\n  console.log(countryNames);\n  console.log(population);\n  const data = {\n    labels: countryNames,\n    datasets: [{\n      data: population,\n      backgroundColor: backgroundColors,\n      // Bar color\n      borderColor: 'rgba(66, 165, 245, 1)',\n      // Border color\n      borderWidth: 1\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      datalabels: {\n        color: 'black',\n        align: 'top'\n      }\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'South America Countries'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Population'\n        },\n        max: 200000000\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.chartContainer,\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Russ, \"h4jXjcpSANtgQECiHMvXXkjOcLw=\", false, function () {\n  return [useFetchData];\n});\n_c = Russ;\nconst styles = {\n  chartContainer: {\n    maxWidth: '80%',\n    width: '100%',\n    height: '100%',\n    margin: '20px auto'\n  }\n};\nexport default Russ;\nvar _c;\n$RefreshReg$(_c, \"Russ\");","map":{"version":3,"names":["React","backgroundColors","useFetchData","Bar","jsxDEV","_jsxDEV","Russ","title","_s","url","data","counteries","isLoaded","error","children","message","fileName","_jsxFileName","lineNumber","columnNumber","countryNames","map","item","name","population","console","log","labels","datasets","backgroundColor","borderColor","borderWidth","options","responsive","plugins","datalabels","color","align","legend","display","scales","x","text","y","max","className","style","styles","chartContainer","_c","maxWidth","width","height","margin","$RefreshReg$"],"sources":["/Users/raghadalmusawi/Desktop/finalProject-564/src/Views/Russ.js"],"sourcesContent":["import React from 'react';\nimport { backgroundColors } from '../Uitls/chartColors';\nimport useFetchData from '../Hooks/GetAPI'; // Import the custom hook\nimport 'chart.js/auto';\nimport { Bar } from 'react-chartjs-2';\n\nconst Russ = ({ title }) => {\n  const url = 'https://cs464p564-frontend-api.vercel.app/api/countries';\n\n  // Call the custom hook and pass the URL to fetch the data from the API\n  const { data: counteries, isLoaded, error } = useFetchData(url);\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n  //save the needed data\n  const countryNames = counteries.map((item) => item.name);\n  const population = counteries.map((item) => item.population);\n\n  console.log(countryNames);\n  console.log(population);\n\n  const data = {\n    labels: countryNames,\n    datasets: [\n      {\n        data: population,\n        backgroundColor: backgroundColors, // Bar color\n        borderColor: 'rgba(66, 165, 245, 1)', // Border color\n        borderWidth: 1,\n      },\n    ],\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      datalabels: {\n        color: 'black',\n        align: 'top',\n        \n      },\n    },\n    legend: {\n      display: false,\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'South America Countries',\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Population',\n        },\n        max: 200000000,\n      },\n    },\n  };\n\n  return (\n    <section className=\"container\">\n      <h1>{title}</h1>\n      <div style={styles.chartContainer}>\n        <Bar data={data} options={options} />\n      </div>\n    </section>\n  );\n};\n\nconst styles = {\n  chartContainer: {\n    maxWidth: '80%',\n    width: '100%',\n    height: '100%',\n    margin: '20px auto',\n  },\n};\nexport default Russ;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}